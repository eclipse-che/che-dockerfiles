############################################################
#####                                                  #####
#####                  CHE SYSTEM                      #####
#####                                                  #####
#
# Fundamental parameters that affect the initial system operation.
#

# IP address, hostname, or DNS  
#     The IP address or DNS name of where the Che endpoint will service your users.
#     If you are running this on a local system, we auto-detect this value as the IP
#     address of your Docker daemon. On many systems, especially those from cloud hosters
#     like DigitalOcean, you must explicitly set this to the external IP address or
#     DNS entry provided by the provider.
#CHE_HOST=localhost

# Proxies
#     Che's internal system services such as its internal JVMs need to 
#     have system level properties applied so that they can reach the Internet. Che's 
#     system uses the Internet to communicate with DockerHub for downloading images that 
#     are used to run Che's systems. Note that you must configure proxy access in three
#     locations. First, you enabled your system Docker daemon to use proxies. Second, you 
#     configure proxies for Che's internal system services. Third, if you want your users 
#     to access the Internet, then you should also add proxy values for their workspaces.
#    
#     Please be mindful of the proxy URL formatting. Proxies are unforgiving if you do not type
#     the URL just right, inclduing the protocol and whether they allow a trailing /.
#CHE_HTTP_PROXY_FOR_CHE=http://myproxy.com:8001/
#CHE_HTTPS_PROXY_FOR_CHE=http://myproxy.com:8001/
#CHE_NO_PROXY_FOR_CHE=<ip-or-domains-that-do-not-require-proxy-access>

# Proxies for Workspaces
#     The proxy values that will be set as environment variables within each user's workspace.
#     Set these to allow users Internet access if they are behind a proxy.
#CHE_HTTP_PROXY_FOR_CHE_WORKSPACES=http://myproxy.com:8001/
#CHE_HTTPS_PROXY_FOR_CHE_WORKSPACES=http://myproxy.com:8001/
#CHE_NO_PROXY_FOR_CHE_WORKSPACES=<ip-or-domains-that-do-not-require-proxy-access>

# JPDA
#     If using Che in development mode, activate  this property to enable JPDA
#     mode within Che's internal Tomcat
#CHE_DEBUG_SUSPEND=false
#CHE_DEBUG_PORT=8000


# XMX
#      Che's core server runs as a Tomcat application on top of a JVM. This sets the 
#      JVM XMX settings that are loaded by the JVM when the Che container boots. 
#      It should be rare that you would need to change this.
#CHE_SERVER_XMX=2048

############################################################
#####                                                  #####
#####             WORKSPACE CONFIGURATION              #####
#####                                                  #####
#
# User workspaces have their own runtimes. Those runtimes can be composed 1..n containers.
# We call each container a 'machine' as it is a dedicated runtime. One of the machines for a
# workspace must be designated as the 'development' machine, which installs Che agents to 
# provide additional services to the user. These parameters configure how Che manages user
# machines and the agents that are deployed within them. 
#
# Since workspaces have their own runtimes, they have separate proxies that do not inherit from
# the system proxies that you have configured for your Docker daemon.
#
# /etc/hosts for Workspaces
#     This will add entries into the user's /etc/hosts file that is running within their workspace.
#     You may need to configure this file to give the user access to systems within your network
#     or access to the Internet.
#CHE_MACHINE_EXTRA_HOSTS=NULL

# Idle Timeout
#     The length of time that a user is idel with their workspace when the system will suspend the
#     workspace by snapshotting it and then stopping it. Idleness is determined by the length of
#     time that the user has not interacted with the workspace, meaning that one of our agents
#     has not received instructions. Leaving a browser window open counts as idleness time.
#CHE_MACHINE_WS_AGENT_INACTIVE_STOP_TIMEOUT_MS=600000

# Memory
#     The recommended RAM size that users will see for their workspace when they create new
#     workspaces in the user dashboard.
#CHE_MACHINE_DEFAULT_MEM_SIZE_MB=1024

# Memory Swap
#     Adjust machine swap memory by multiplication current machnine memory on provided value.
#     default is 0 which means disabled swap, if set multiplier value equal to 0.5 
#     machine swap will be configured with size that equal to half of current machine memory. 
#     It should be rare that you would configure this. See Docker memory swap online 
#     for background.
#CHE_MACHINE_DOCKER_MEMORY_SWAP_MULTIPLIER=0

# Host Volume Mounts
#     Semicolon separated list of volume mounts. If this is provided, Che will volume mount
#     those host folders into each workspace generated by your users. This is a way to allow
#     you to provide access to network attached storage that is shared across many workspaces.
#CHE_MACHINE_SERVER_EXTRA_VOLUME=/path/on/host:/path/in/workspace:ro,Z;/path/to/host2:/path/in/workspace2:ro,Z;

# Privilged Mode
#     Set to `true` if you would like user workspaces to be started with Docker's privileged mode.
#     Please be careful when setting this property. This allows user workspaces to gain access to 
#     the underly host with root privileges. However, privileged mode is needed if users want to
#     launch their own Docker containers from within their Docker-powered workspace.
#CHE_MACHINE_DOCKER_PRIVILEGE_MODE=false

# Agent Start Timeout
#     The length of time that a workspace will be allowed to boot before the system terminates the
#     boot process. If the Che container cannot establish two way communications with the 
#     agents within the workspace when it boots, then the workspace will not be started. 
#CHE_MACHINE_WS_AGENT_MAX_START_TIME_MS=300000


############################################################
#####                                                  #####
#####                OAUTH CONFIGURATION               #####
#####                                                  #####
#
# You can configure a 3rd party provider's oAuth, which will be used for your users when they 
# create accounts and login. There are certain services within Che, such as GitHub 
# integration, where GitHub keys are required. oAuth must be configured for those services to work.
#
# Google
#CHE_GOOGLE_CLIENT_ID=your_google_client_id
#CHE_GOOGLE_SECRET=your_google_secret

# GitHub
#CHE_GITHUB_CLIENT_ID=your_github_client_ide
#CHE_GITHUB_SECRET=your_google_secret

# BitBucket
#CHE_BITBUCKET_CLIENT_ID=your_bitbucket_client_ide
#CHE_BITBUCKET_SECRET=your_bitbucket_secret

# Microsoft
#CHE_MICROSOFT_CLIENT_ID==your_microsoft_client_ide
#CHE_MICROSOFT_SECRET=your_microsoft_secret

# WSO2
#CHE_WSO2_CLIENT_ID=your_wso2_client_ide
#CHE_WSO2_SECRET=your_wso2_secret

# Project Locker
#CHE_PROJECTLOCKER_CLIENT_ID=your_projectlocker_client_ide
#CHE_PROJECTLOCKER_SECRET=your_projectlocker_secret



############################################################
#####                                                  #####
#####                        JMX                       #####
#####                                                  #####
# 
# JMX provides a management interface point to within the Che container. JMX is not 
# use by other containers such as haproxy or nginx. While Che is running, grab the 
# IP address of the Che container and you can connect to its embedded JMX server.
#
#CHE_JMX_USERNAME=admin
#CHE_JMX_PASSWORD=Che


############################################################
#####                                                  #####
#####                    DOCKER                        #####
#####                                                  #####
# IP Address
#     The IP address of the Docker daemon that is running on your host. We do a self-discovery
#     to set this. You can combine this with values of DOCKER_HOST to change communications
#     from socket to TCP.  This value will be set to DOCKER_MACHINE_HOST env variable for 
#     the Che Docker container when it boots - it's how we determine what containers will boot.
#CHE_DOCKER_IP=172.17.0.1

# Docker Host
#     How Che will connect to the Docker Host.
#DOCKER_HOST=tcp://localhost:2375